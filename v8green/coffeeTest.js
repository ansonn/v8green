// Generated by CoffeeScript 1.8.0
var fd, fs, i, numBytes, testPath, writeBuffer, _i;

fs = global.fs || require('fs');

console.log('fs', Object.keys(fs));

writeBuffer = global.Buffer ? new Buffer(1024) : createSimpleBuffer(1024);

if (true) {
  for (i = _i = 0; _i < 1000; i = ++_i) {
    fs.open('./asyncFiles/afw' + i, 'w', function(err, fd) {
      return fs.write(fd, writeBuffer, 0, writeBuffer.length, 0, function(err, bytesWritten, buf) {
        return fs.close(fd, function(err) {});
      });
    });
  }
}

if (false) {
  fs.open = function(path, flags, callback) {
    return callback(null, fs.openSync(path, flags));
  };
  fs.write = function(fd, buffer, offset, length, position, callback) {
    return callback(null, fs.writeSync(fd, buffer, offset, length, position), buffer);
  };
  fs.close = function(fd, callback) {
    return callback(fs.closeSync(fd));
  };
  testPath = 'z:/asyncFiles/af';
  if (false) {
    fd = fs.openSync(testPath + 'w', 'w');
    console.log('fd', fd);
    numBytes = fs.writeSync(fd, writeBuffer, 0, writeBuffer.length, 0);
    console.log('writeBuffer', numBytes);
    console.log('closeSync', fs.closeSync(fd));
  } else {
    fs.open(testPath + 'w', 'w', function(err, fd) {
      console.log('open');
      return fs.write(fd, writeBuffer, 0, writeBuffer.length, 0, function(err, bytesWritten, buf) {
        console.log('written');
        return fs.close(fd, function() {
          return console.log('closed');
        });
      });
    });
  }
}
